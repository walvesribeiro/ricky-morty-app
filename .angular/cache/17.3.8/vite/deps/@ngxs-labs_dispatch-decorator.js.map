{
  "version": 3,
  "sources": ["../../../../../node_modules/@ngxs-labs/dispatch-decorator/fesm2020/ngxs-labs-dispatch-decorator.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { ɵisPromise, NgZone, ɵɵdirectiveInject, INJECTOR, ɵglobal, NgModule } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { isObservable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nfunction unwrapObservable(store, wrapped, actionCompleter) {\n  if (actionCompleter !== null) {\n    wrapped = wrapped.pipe(takeUntil(actionCompleter.cancelUncompleted$));\n  }\n  wrapped.subscribe({\n    next: actionOrActions => store.dispatch(actionOrActions)\n  });\n  return wrapped;\n}\nfunction unwrapPromise(store, wrapped) {\n  return wrapped.then(actionOrActions => {\n    store.dispatch(actionOrActions);\n    return actionOrActions;\n  });\n}\nfunction unwrapAndDispatch(store, wrapped, actionCompleter) {\n  if (ɵisPromise(wrapped)) {\n    return unwrapPromise(store, wrapped);\n  } else if (isObservable(wrapped)) {\n    return unwrapObservable(store, wrapped, actionCompleter);\n  } else {\n    store.dispatch(wrapped);\n    return wrapped;\n  }\n}\nclass NgxsDispatchPluginModuleNotImported extends Error {\n  constructor() {\n    super(...arguments);\n    this.message = 'NgxsDispatchPluginModule is not imported';\n  }\n}\nlet _injector = null;\nfunction setInjector(injector) {\n  _injector = injector;\n}\nfunction getStore() {\n  if (_injector === null) {\n    throw new NgxsDispatchPluginModuleNotImported();\n  } else {\n    return _injector.get(Store);\n  }\n}\nfunction getNgZone() {\n  if (_injector === null) {\n    throw new NgxsDispatchPluginModuleNotImported();\n  } else {\n    return _injector.get(NgZone);\n  }\n}\nclass ActionCompleter {\n  constructor() {\n    this.cancelUncompleted$ = new Subject();\n  }\n  cancelPreviousAction() {\n    this.cancelUncompleted$.next();\n  }\n}\nfunction createActionCompleter(cancelUncompleted) {\n  return cancelUncompleted ? new ActionCompleter() : null;\n}\n\n// Angular doesn't export `NG_FACTORY_DEF`.\nconst NG_FACTORY_DEF = 'ɵfac';\n// A `Symbol` which is used to save the `Injector` onto the class instance.\nconst InjectorInstance = Symbol('InjectorInstance');\n// A `Symbol` which is used to determine if factory has been decorated previously or not.\nconst FactoryHasBeenDecorated = Symbol('FactoryHasBeenDecorated');\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction ensureLocalInjectorCaptured(target) {\n  if (FactoryHasBeenDecorated in target.constructor.prototype) {\n    return;\n  }\n  const constructor = target.constructor;\n  // Means we're in AOT mode.\n  if (typeof constructor[NG_FACTORY_DEF] === 'function') {\n    decorateFactory(constructor);\n  } else if (ngDevMode) {\n    // We're running in JIT mode and that means we're not able to get the compiled definition\n    // on the class inside the property decorator during the current message loop tick. We have\n    // to wait for the next message loop tick. Note that this is safe since this Promise will be\n    // resolved even before the `APP_INITIALIZER` is resolved.\n    // The below code also will be executed only in development mode, since it's never recommended\n    // to use the JIT compiler in production mode (by setting \"aot: false\").\n    decorateFactoryLater(constructor);\n  }\n  target.constructor.prototype[FactoryHasBeenDecorated] = true;\n}\nfunction localInject(instance, token) {\n  const injector = instance[InjectorInstance];\n  return injector ? injector.get(token) : null;\n}\nfunction decorateFactory(constructor) {\n  const factory = constructor[NG_FACTORY_DEF];\n  if (typeof factory !== 'function') {\n    return;\n  }\n  // Let's try to get any definition.\n  // Caretaker note: this will be compatible only with Angular 9+, since Angular 9 is the first\n  // Ivy-stable version. Previously definition properties were named differently (e.g. `ngComponentDef`).\n  const def = constructor.ɵprov || constructor.ɵpipe || constructor.ɵcmp || constructor.ɵdir;\n  const decoratedFactory = () => {\n    const instance = factory();\n    // Caretaker note: `inject()` won't work here.\n    // We can use the `directiveInject` only during the component\n    // construction, since Angular captures the currently active injector.\n    // We're not able to use this function inside the getter (when the `selectorId` property is\n    // requested for the first time), since the currently active injector will be null.\n    instance[InjectorInstance] = ɵɵdirectiveInject(\n    // We're using `INJECTOR` token except of the `Injector` class since the compiler\n    // throws: `Cannot assign an abstract constructor type to a non-abstract constructor type.`.\n    // Caretaker note: that this is the same way of getting the injector.\n    INJECTOR);\n    return instance;\n  };\n  if (def) {\n    def.factory = decoratedFactory;\n  }\n  Object.defineProperty(constructor, NG_FACTORY_DEF, {\n    get: () => decoratedFactory\n  });\n}\nfunction decorateFactoryLater(constructor) {\n  // This function actually will be tree-shaken away when building for production since it's guarded with `ngDevMode`.\n  // We're having the `try-catch` here because of the `SyncTestZoneSpec`, which throws\n  // an error when micro or macrotask is used within a synchronous test. E.g. `Cannot call\n  // Promise.then from within a sync test`.\n  try {\n    Promise.resolve().then(() => {\n      decorateFactory(constructor);\n    });\n  } catch {\n    // This is kind of a \"hack\", but we try to be backwards-compatible,\n    // tho this `catch` block will only be executed when tests are run with Jasmine or Jest.\n    ɵglobal.process && ɵglobal.process.nextTick && ɵglobal.process.nextTick(() => {\n      decorateFactory(constructor);\n    });\n  }\n}\nconst defaultOptions = {\n  cancelUncompleted: false\n};\nfunction Dispatch(options = defaultOptions) {\n  return (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  target, propertyKey,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  descriptor) => {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    let originalValue;\n    const actionCompleter = createActionCompleter(options.cancelUncompleted);\n    function wrapped() {\n      // Every time the function is invoked we have to generate event\n      // to cancel previously uncompleted asynchronous job\n      if (actionCompleter !== null) {\n        actionCompleter.cancelPreviousAction();\n      }\n      const store = localInject(this, Store) || getStore();\n      const ngZone = localInject(this, NgZone) || getNgZone();\n      // eslint-disable-next-line prefer-rest-params\n      const wrapped = originalValue.apply(this, arguments);\n      return ngZone.runOutsideAngular(() => unwrapAndDispatch(store, wrapped, actionCompleter));\n    }\n    if (typeof descriptor?.value === 'function') {\n      originalValue = descriptor.value;\n      descriptor.value = wrapped;\n    } else {\n      Object.defineProperty(target, propertyKey, {\n        set: value => originalValue = value,\n        get: () => wrapped\n      });\n    }\n    ensureLocalInjectorCaptured(target);\n  };\n}\nclass NgxsDispatchPluginModule {\n  constructor(ngModuleRef) {\n    setInjector(ngModuleRef.injector);\n    ngModuleRef.onDestroy(() => {\n      setInjector(null);\n    });\n  }\n  static forRoot() {\n    return {\n      ngModule: NgxsDispatchPluginModule\n    };\n  }\n}\n/** @nocollapse */\nNgxsDispatchPluginModule.ɵfac = function NgxsDispatchPluginModule_Factory(t) {\n  return new (t || NgxsDispatchPluginModule)(i0.ɵɵinject(i0.NgModuleRef));\n};\n/** @nocollapse */\nNgxsDispatchPluginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxsDispatchPluginModule\n});\n/** @nocollapse */\nNgxsDispatchPluginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsDispatchPluginModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: i0.NgModuleRef\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Dispatch, NgxsDispatchPluginModule };\n"],
  "mappings": "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",
  "names": ["wrapped"]
}
