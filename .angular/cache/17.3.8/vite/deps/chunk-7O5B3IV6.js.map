{
  "version": 3,
  "sources": ["../../../../../node_modules/@ngxs/store/fesm2015/ngxs-store-internals.js", "../../../../../node_modules/@ngxs/store/fesm2015/ngxs-store-operators.js", "../../../../../node_modules/@ngxs/store/fesm2015/ngxs-store.js"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nclass NgxsBootstrapper {\n  constructor() {\n    /**\n     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n     */\n    this.bootstrap$ = new ReplaySubject(1);\n  }\n  get appBootstrapped$() {\n    return this.bootstrap$.asObservable();\n  }\n  /**\n   * This event will be emitted after attaching `ComponentRef` of the root component\n   * to the tree of views, that's a signal that application has been fully rendered\n   */\n  bootstrap() {\n    this.bootstrap$.next(true);\n    this.bootstrap$.complete();\n  }\n}\n/** @nocollapse */\nNgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {\n  return new (t || NgxsBootstrapper)();\n};\n/** @nocollapse */\nNgxsBootstrapper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxsBootstrapper,\n  factory: NgxsBootstrapper.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsBootstrapper, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length;\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n */\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n  let lastArgs = null;\n  let lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  function memoized() {\n    // eslint-disable-next-line prefer-rest-params\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      // eslint-disable-next-line prefer-rest-params, prefer-spread\n      lastResult = func.apply(null, arguments);\n    }\n    // eslint-disable-next-line prefer-rest-params\n    lastArgs = arguments;\n    return lastResult;\n  }\n  memoized.reset = function () {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n  return memoized;\n}\nclass InitialState {\n  static set(state) {\n    this._value = state;\n  }\n  static pop() {\n    const state = this._value;\n    this._value = {};\n    return state;\n  }\n}\nInitialState._value = {};\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN', {\n  providedIn: 'root',\n  factory: () => InitialState.pop()\n});\n\n// These tokens are internal and can change at any point.\nconst ɵNGXS_STATE_FACTORY = new InjectionToken('ɵNGXS_STATE_FACTORY');\nconst ɵNGXS_STATE_CONTEXT_FACTORY = new InjectionToken('ɵNGXS_STATE_CONTEXT_FACTORY');\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NgxsBootstrapper, memoize, ɵNGXS_STATE_CONTEXT_FACTORY, ɵNGXS_STATE_FACTORY };\n", "/**\n * @param items - Specific items to append to the end of an array\n */\nfunction append(items) {\n    return function appendOperator(existing) {\n        // If `items` is `undefined` or `null` or `[]` but `existing` is provided\n        // just return `existing`\n        const itemsNotProvidedButExistingIs = (!items || !items.length) && existing;\n        if (itemsNotProvidedButExistingIs) {\n            return existing;\n        }\n        if (Array.isArray(existing)) {\n            return existing.concat(items);\n        }\n        // For example if some property is added dynamically\n        // and didn't exist before thus it's not `ArrayLike`\n        return items;\n    };\n}\n\nfunction compose(...operators) {\n    return function composeOperator(existing) {\n        return operators.reduce((accumulator, operator) => operator(accumulator), existing);\n    };\n}\n\nfunction isStateOperator(value) {\n    return typeof value === 'function';\n}\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\nfunction isPredicate(value) {\n    return typeof value === 'function';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\nfunction invalidIndex(index) {\n    return Number.isNaN(index) || index === -1;\n}\nfunction isNil(value) {\n    return value === null || isUndefined(value);\n}\n\nfunction retrieveValue(operatorOrValue, existing) {\n    // If state operator is a function\n    // then call it with an original value\n    if (isStateOperator(operatorOrValue)) {\n        const value = operatorOrValue(existing);\n        return value;\n    }\n    // If operator or value was not provided\n    // e.g. `elseOperatorOrValue` is `undefined`\n    // then we just return an original value\n    if (isUndefined(operatorOrValue)) {\n        return existing;\n    }\n    return operatorOrValue;\n}\n/**\n * @param condition - Condition can be a plain boolean value or a function,\n * that returns boolean, also this function can take a value as an argument\n * to which this state operator applies\n * @param trueOperatorOrValue - Any value or a state operator\n * @param elseOperatorOrValue - Any value or a state operator\n */\nfunction iif(condition, trueOperatorOrValue, elseOperatorOrValue) {\n    return function iifOperator(existing) {\n        // Convert the value to a boolean\n        let result = !!condition;\n        // but if it is a function then run it to get the result\n        if (isPredicate(condition)) {\n            result = condition(existing);\n        }\n        if (result) {\n            return retrieveValue(trueOperatorOrValue, existing);\n        }\n        return retrieveValue(elseOperatorOrValue, existing);\n    };\n}\n\n/**\n * @param value - Value to insert\n * @param [beforePosition] -  Specified index to insert value before, optional\n */\nfunction insertItem(value, beforePosition) {\n    return function insertItemOperator(existing) {\n        // Have to check explicitly for `null` and `undefined`\n        // because `value` can be `0`, thus `!value` will return `true`\n        if (isNil(value) && existing) {\n            return existing;\n        }\n        // Property may be dynamic and might not existed before\n        if (!Array.isArray(existing)) {\n            return [value];\n        }\n        const clone = existing.slice();\n        let index = 0;\n        // No need to call `isNumber`\n        // as we are checking `> 0` not `>= 0`\n        // everything except number will return false here\n        if (beforePosition > 0) {\n            index = beforePosition;\n        }\n        clone.splice(index, 0, value);\n        return clone;\n    };\n}\n\nfunction patch(patchObject) {\n    return function patchStateOperator(existing) {\n        let clone = null;\n        for (const k in patchObject) {\n            const newValue = patchObject[k];\n            const existingPropValue = existing === null || existing === void 0 ? void 0 : existing[k];\n            const newPropValue = isStateOperator(newValue)\n                ? newValue(existingPropValue)\n                : newValue;\n            if (newPropValue !== existingPropValue) {\n                if (!clone) {\n                    clone = Object.assign({}, existing);\n                }\n                clone[k] = newPropValue;\n            }\n        }\n        return clone || existing;\n    };\n}\n\n/**\n * @param selector - Index of item in the array or a predicate function\n * that can be provided in `Array.prototype.findIndex`\n * @param operatorOrValue - New value under the `selector` index or a\n * function that can be applied to an existing value\n */\nfunction updateItem(selector, operatorOrValue) {\n    return function updateItemOperator(existing) {\n        let index = -1;\n        if (isPredicate(selector)) {\n            index = existing.findIndex(selector);\n        }\n        else if (isNumber(selector)) {\n            index = selector;\n        }\n        if (invalidIndex(index)) {\n            return existing;\n        }\n        let value = null;\n        // Need to check if the new item value will change the existing item value\n        // then, only if it will change it then clone the array and set the item\n        const theOperatorOrValue = operatorOrValue;\n        if (isStateOperator(theOperatorOrValue)) {\n            value = theOperatorOrValue(existing[index]);\n        }\n        else {\n            value = theOperatorOrValue;\n        }\n        // If the value hasn't been mutated\n        // then we just return `existing` array\n        if (value === existing[index]) {\n            return existing;\n        }\n        const clone = existing.slice();\n        clone[index] = value;\n        return clone;\n    };\n}\n\n/**\n * @param selector - index or predicate to remove an item from an array by\n */\nfunction removeItem(selector) {\n    return function removeItemOperator(existing) {\n        let index = -1;\n        if (isPredicate(selector)) {\n            index = existing.findIndex(selector);\n        }\n        else if (isNumber(selector)) {\n            index = selector;\n        }\n        if (invalidIndex(index)) {\n            return existing;\n        }\n        const clone = existing.slice();\n        clone.splice(index, 1);\n        return clone;\n    };\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { append, compose, iif, insertItem, isPredicate, isStateOperator, patch, removeItem, updateItem };\n\n", "import * as i0 from '@angular/core';\nimport { NgZone, PLATFORM_ID, Injectable, Inject, InjectionToken, inject, INJECTOR, ɵglobal, ErrorHandler, Optional, SkipSelf, NgModule, APP_BOOTSTRAP_LISTENER } from '@angular/core';\nimport * as i5 from '@ngxs/store/internals';\nimport { memoize, INITIAL_STATE_TOKEN, NgxsBootstrapper, ɵNGXS_STATE_CONTEXT_FACTORY, ɵNGXS_STATE_FACTORY } from '@ngxs/store/internals';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, Subject, BehaviorSubject, of, forkJoin, throwError, EMPTY, from, isObservable } from 'rxjs';\nimport { filter, map, share, shareReplay, take, exhaustMap, mergeMap, defaultIfEmpty, catchError, takeUntil, distinctUntilChanged, tap, startWith, pairwise } from 'rxjs/operators';\nimport { isStateOperator } from '@ngxs/store/operators';\n\n/**\n * Returns the type from an action instance/class.\n * @ignore\n */\nfunction getActionTypeFromInstance(action) {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  } else {\n    return action.type;\n  }\n}\n/**\n * Matches a action\n * @ignore\n */\nfunction actionMatcher(action1) {\n  const type1 = getActionTypeFromInstance(action1);\n  return function (action2) {\n    return type1 === getActionTypeFromInstance(action2);\n  };\n}\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n */\nconst setValue = (obj, prop, val) => {\n  obj = Object.assign({}, obj);\n  const split = prop.split('.');\n  const lastIndex = split.length - 1;\n  split.reduce((acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : Object.assign({}, acc[part]);\n    }\n    return acc && acc[part];\n  }, obj);\n  return obj;\n};\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nconst getValue = (obj, prop) => prop.split('.').reduce((acc, part) => acc && acc[part], obj);\n/**\n * Simple object check.\n *\n *    isObject({a:1}) //=> true\n *    isObject(1) //=> false\n *\n * @ignore\n */\nconst isObject$1 = item => {\n  return item && typeof item === 'object' && !Array.isArray(item);\n};\n/**\n * Deep merge two objects.\n *\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\n *\n * @param base base object onto which `sources` will be applied\n */\nconst mergeDeep = (base, ...sources) => {\n  if (!sources.length) return base;\n  const source = sources.shift();\n  if (isObject$1(base) && isObject$1(source)) {\n    for (const key in source) {\n      if (isObject$1(source[key])) {\n        if (!base[key]) Object.assign(base, {\n          [key]: {}\n        });\n        mergeDeep(base[key], source[key]);\n      } else {\n        Object.assign(base, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(base, ...sources);\n};\nfunction throwStateNameError(name) {\n  throw new Error(`${name} is not a valid state name. It needs to be a valid object property name.`);\n}\nfunction throwStateNamePropertyError() {\n  throw new Error(`States must register a 'name' property.`);\n}\nfunction throwStateUniqueError(current, newName, oldName) {\n  throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);\n}\nfunction throwStateDecoratorError(name) {\n  throw new Error(`States must be decorated with @State() decorator, but \"${name}\" isn't.`);\n}\nfunction throwActionDecoratorError() {\n  throw new Error('@Action() decorator cannot be used with static methods.');\n}\nfunction throwSelectorDecoratorError() {\n  throw new Error('Selectors only work on methods.');\n}\nfunction getZoneWarningMessage() {\n  return 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' + 'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' + 'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })';\n}\nfunction getUndecoratedStateInIvyWarningMessage(name) {\n  return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;\n}\nfunction throwSelectFactoryNotConnectedError() {\n  throw new Error('You have forgotten to import the NGXS module!');\n}\nfunction throwPatchingArrayError() {\n  throw new Error('Patching arrays is not supported.');\n}\nfunction throwPatchingPrimitiveError() {\n  throw new Error('Patching primitives is not supported.');\n}\nclass DispatchOutsideZoneNgxsExecutionStrategy {\n  constructor(_ngZone, _platformId) {\n    this._ngZone = _ngZone;\n    this._platformId = _platformId;\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      verifyZoneIsNotNooped(_ngZone);\n    }\n  }\n  enter(func) {\n    if (isPlatformServer(this._platformId)) {\n      return this.runInsideAngular(func);\n    }\n    return this.runOutsideAngular(func);\n  }\n  leave(func) {\n    return this.runInsideAngular(func);\n  }\n  runInsideAngular(func) {\n    if (NgZone.isInAngularZone()) {\n      return func();\n    }\n    return this._ngZone.run(func);\n  }\n  runOutsideAngular(func) {\n    if (NgZone.isInAngularZone()) {\n      return this._ngZone.runOutsideAngular(func);\n    }\n    return func();\n  }\n}\n/** @nocollapse */\nDispatchOutsideZoneNgxsExecutionStrategy.ɵfac = function DispatchOutsideZoneNgxsExecutionStrategy_Factory(t) {\n  return new (t || DispatchOutsideZoneNgxsExecutionStrategy)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID));\n};\n/** @nocollapse */\nDispatchOutsideZoneNgxsExecutionStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DispatchOutsideZoneNgxsExecutionStrategy,\n  factory: DispatchOutsideZoneNgxsExecutionStrategy.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DispatchOutsideZoneNgxsExecutionStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n// Caretaker note: this should exist as a separate function and not a class method,\n// since class methods are not tree-shakable.\nfunction verifyZoneIsNotNooped(ngZone) {\n  // `NoopNgZone` is not exposed publicly as it doesn't expect\n  // to be used outside of the core Angular code, thus we just have\n  // to check if the zone doesn't extend or instanceof `NgZone`.\n  if (ngZone instanceof NgZone) {\n    return;\n  }\n  console.warn(getZoneWarningMessage());\n}\nconst ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\nconst ROOT_STATE_TOKEN = new InjectionToken('ROOT_STATE_TOKEN');\nconst FEATURE_STATE_TOKEN = new InjectionToken('FEATURE_STATE_TOKEN');\nconst NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\nconst META_KEY = 'NGXS_META';\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\nconst SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\n/**\n * The NGXS config settings.\n */\nclass NgxsConfig {\n  constructor() {\n    /**\n     * Defining the default state before module initialization\n     * This is convenient if we need to create a define our own set of states.\n     * @deprecated will be removed after v4\n     * (default: {})\n     */\n    this.defaultsState = {};\n    /**\n     * Defining shared selector options\n     */\n    this.selectorOptions = {\n      injectContainerState: true,\n      suppressErrors: true // TODO: default is true in v3, will change in v4\n    };\n    this.compatibility = {\n      strictContentSecurityPolicy: false\n    };\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\n  }\n}\n/** @nocollapse */\nNgxsConfig.ɵfac = function NgxsConfig_Factory(t) {\n  return new (t || NgxsConfig)();\n};\n/** @nocollapse */\nNgxsConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxsConfig,\n  factory: function NgxsConfig_Factory(t) {\n    let r = null;\n    if (t) {\n      r = new t();\n    } else {\n      r = (options => mergeDeep(new NgxsConfig(), options))(i0.ɵɵinject(ROOT_OPTIONS));\n    }\n    return r;\n  },\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: options => mergeDeep(new NgxsConfig(), options),\n      deps: [ROOT_OPTIONS]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Represents a basic change from a previous to a new value for a single state instance.\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\n */\nclass NgxsSimpleChange {\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n}\nclass NoopNgxsExecutionStrategy {\n  enter(func) {\n    return func();\n  }\n  leave(func) {\n    return func();\n  }\n}\n/** @nocollapse */\nNoopNgxsExecutionStrategy.ɵfac = function NoopNgxsExecutionStrategy_Factory(t) {\n  return new (t || NoopNgxsExecutionStrategy)();\n};\n/** @nocollapse */\nNoopNgxsExecutionStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NoopNgxsExecutionStrategy,\n  factory: NoopNgxsExecutionStrategy.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NoopNgxsExecutionStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * The strategy that might be provided by users through `options.executionStrategy`.\n */\nconst USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');\n/*\n * Internal execution strategy injection token\n */\nconst NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(INJECTOR);\n    const executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);\n    return executionStrategy ? injector.get(executionStrategy) : injector.get(typeof ɵglobal.Zone !== 'undefined' ? DispatchOutsideZoneNgxsExecutionStrategy : NoopNgxsExecutionStrategy);\n  }\n});\n\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n */\nfunction ensureStoreMetadata$1(target) {\n  if (!target.hasOwnProperty(META_KEY)) {\n    const defaultMetadata = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n      makeRootSelector(context) {\n        return context.getStateGetter(defaultMetadata.name);\n      },\n      children: []\n    };\n    Object.defineProperty(target, META_KEY, {\n      value: defaultMetadata\n    });\n  }\n  return getStoreMetadata$1(target);\n}\n/**\n * Get the metadata attached to the state class if it exists.\n *\n * @ignore\n */\nfunction getStoreMetadata$1(target) {\n  return target[META_KEY];\n}\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n */\nfunction ensureSelectorMetadata$1(target) {\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\n    const defaultMetadata = {\n      makeRootSelector: null,\n      originalFn: null,\n      containerClass: null,\n      selectorName: null,\n      getSelectorOptions: () => ({})\n    };\n    Object.defineProperty(target, SELECTOR_META_KEY, {\n      value: defaultMetadata\n    });\n  }\n  return getSelectorMetadata$1(target);\n}\n/**\n * Get the metadata attached to the selector if it exists.\n *\n * @ignore\n */\nfunction getSelectorMetadata$1(target) {\n  return target[SELECTOR_META_KEY];\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\n *\n * @ignore\n */\nfunction compliantPropGetter(paths) {\n  const copyOfPaths = paths.slice();\n  return obj => copyOfPaths.reduce((acc, part) => acc && acc[part], obj);\n}\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n */\nfunction fastPropGetter(paths) {\n  const segments = paths;\n  let seg = 'store.' + segments[0];\n  let i = 0;\n  const l = segments.length;\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n  const fn = new Function('store', 'return ' + expr + ';');\n  return fn;\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n */\nfunction propGetter(paths, config) {\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\n    return compliantPropGetter(paths);\n  } else {\n    return fastPropGetter(paths);\n  }\n}\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n */\nfunction buildGraph(stateClasses) {\n  const findName = stateClass => {\n    const meta = stateClasses.find(g => g === stateClass);\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !meta) {\n      throw new Error(`Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`);\n    }\n    return meta[META_KEY].name;\n  };\n  return stateClasses.reduce((result, stateClass) => {\n    const {\n      name,\n      children\n    } = stateClass[META_KEY];\n    result[name] = (children || []).map(findName);\n    return result;\n  }, {});\n}\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n */\nfunction nameToState(states) {\n  return states.reduce((result, stateClass) => {\n    const meta = stateClass[META_KEY];\n    result[meta.name] = stateClass;\n    return result;\n  }, {});\n}\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n */\nfunction findFullParentPath(obj, newObj = {}) {\n  const visit = (child, keyToFind) => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n    return null;\n  };\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n  return newObj;\n}\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n */\nfunction topologicalSort(graph) {\n  const sorted = [];\n  const visited = {};\n  const visit = (name, ancestors = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n    ancestors.push(name);\n    visited[name] = true;\n    graph[name].forEach(dep => {\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ancestors.indexOf(dep) >= 0) {\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\n      }\n      if (visited[dep]) {\n        return;\n      }\n      visit(dep, ancestors.slice(0));\n    });\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n  Object.keys(graph).forEach(k => visit(k));\n  return sorted.reverse();\n}\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n */\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null || typeof obj === 'function';\n}\n\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n */\nfunction ofAction(...allowedTypes) {\n  return ofActionOperator(allowedTypes);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n */\nfunction ofActionDispatched(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"DISPATCHED\" /* Dispatched */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n */\nfunction ofActionSuccessful(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"SUCCESSFUL\" /* Successful */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n */\nfunction ofActionCanceled(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"CANCELED\" /* Canceled */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been completed\n */\nfunction ofActionCompleted(...allowedTypes) {\n  const allowedStatuses = [\"SUCCESSFUL\" /* Successful */, \"CANCELED\" /* Canceled */, \"ERRORED\" /* Errored */];\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n */\nfunction ofActionErrored(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"ERRORED\" /* Errored */]);\n}\nfunction ofActionOperator(allowedTypes, statuses,\n// This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\n// since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\n// defaults to `any`, thus there is no sense from union type.\nmapOperator = mapAction) {\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\n  return function (o) {\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\n  };\n}\nfunction filterStatus(allowedTypes, allowedStatuses) {\n  return filter(ctx => {\n    const actionType = getActionTypeFromInstance(ctx.action);\n    const typeMatch = allowedTypes[actionType];\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\n    return typeMatch && statusMatch;\n  });\n}\nfunction mapActionResult() {\n  return map(({\n    action,\n    status,\n    error\n  }) => {\n    return {\n      action,\n      result: {\n        successful: \"SUCCESSFUL\" /* Successful */ === status,\n        canceled: \"CANCELED\" /* Canceled */ === status,\n        error\n      }\n    };\n  });\n}\nfunction mapAction() {\n  return map(ctx => ctx.action);\n}\nfunction createAllowedActionTypesMap(types) {\n  return types.reduce((filterMap, klass) => {\n    filterMap[getActionTypeFromInstance(klass)] = true;\n    return filterMap;\n  }, {});\n}\nfunction createAllowedStatusesMap(statuses) {\n  return statuses.reduce((filterMap, status) => {\n    filterMap[status] = true;\n    return filterMap;\n  }, {});\n}\n\n/**\n * Returns operator that will run\n * `subscribe` outside of the ngxs execution context\n */\nfunction leaveNgxs(ngxsExecutionStrategy) {\n  return source => {\n    return new Observable(sink => {\n      return source.subscribe({\n        next(value) {\n          ngxsExecutionStrategy.leave(() => sink.next(value));\n        },\n        error(error) {\n          ngxsExecutionStrategy.leave(() => sink.error(error));\n        },\n        complete() {\n          ngxsExecutionStrategy.leave(() => sink.complete());\n        }\n      });\n    });\n  };\n}\nclass InternalNgxsExecutionStrategy {\n  constructor(_executionStrategy) {\n    this._executionStrategy = _executionStrategy;\n  }\n  enter(func) {\n    return this._executionStrategy.enter(func);\n  }\n  leave(func) {\n    return this._executionStrategy.leave(func);\n  }\n}\n/** @nocollapse */\nInternalNgxsExecutionStrategy.ɵfac = function InternalNgxsExecutionStrategy_Factory(t) {\n  return new (t || InternalNgxsExecutionStrategy)(i0.ɵɵinject(NGXS_EXECUTION_STRATEGY));\n};\n/** @nocollapse */\nInternalNgxsExecutionStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalNgxsExecutionStrategy,\n  factory: InternalNgxsExecutionStrategy.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalNgxsExecutionStrategy, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGXS_EXECUTION_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * This wraps the provided function, and will enforce the following:\n * - The calls will execute in the order that they are made\n * - A call will only be initiated when the previous call has completed\n * - If there is a call currently executing then the new call will be added\n *   to the queue and the function will return immediately\n *\n * NOTE: The following assumptions about the operation must hold true:\n * - The operation is synchronous in nature\n * - If any asynchronous side effects of the call exist, it should not\n *   have any bearing on the correctness of the next call in the queue\n * - The operation has a void return\n * - The caller should not assume that the call has completed upon\n *   return of the function\n * - The caller can assume that all the queued calls will complete\n *   within the current microtask\n * - The only way that a call will encounter another call in the queue\n *   would be if the call at the front of the queue initiated this call\n *   as part of its synchronous execution\n */\nfunction orderedQueueOperation(operation) {\n  const callsQueue = [];\n  let busyPushingNext = false;\n  return function callOperation(...args) {\n    if (busyPushingNext) {\n      callsQueue.unshift(args);\n      return;\n    }\n    busyPushingNext = true;\n    operation(...args);\n    while (callsQueue.length > 0) {\n      const nextCallArgs = callsQueue.pop();\n      nextCallArgs && operation(...nextCallArgs);\n    }\n    busyPushingNext = false;\n  };\n}\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nclass OrderedSubject extends Subject {\n  constructor() {\n    super(...arguments);\n    this._orderedNext = orderedQueueOperation(value => super.next(value));\n  }\n  next(value) {\n    this._orderedNext(value);\n  }\n}\n/**\n * Custom BehaviorSubject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard BehaviorSubject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new BehaviorSubject<string>();\n     subject.subscribe(value => {\n       if (value === 'start') subject.next('end');\n     });\n     subject.subscribe(value => { });\n     subject.next('start');\n * ```\n * When `subject` is a standard `BehaviorSubject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedBehaviorSubject<T>` the second subscriber would recieve `start` and then `end`.\n */\nclass OrderedBehaviorSubject extends BehaviorSubject {\n  constructor(value) {\n    super(value);\n    this._orderedNext = orderedQueueOperation(value => super.next(value));\n    this._currentValue = value;\n  }\n  getValue() {\n    return this._currentValue;\n  }\n  next(value) {\n    this._currentValue = value;\n    this._orderedNext(value);\n  }\n}\n\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\nclass InternalActions extends OrderedSubject {\n  ngOnDestroy() {\n    this.complete();\n  }\n}\n/** @nocollapse */\nInternalActions.ɵfac = /* @__PURE__ */(() => {\n  let ɵInternalActions_BaseFactory;\n  return function InternalActions_Factory(t) {\n    return (ɵInternalActions_BaseFactory || (ɵInternalActions_BaseFactory = i0.ɵɵgetInheritedFactory(InternalActions)))(t || InternalActions);\n  };\n})();\n/** @nocollapse */\nInternalActions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalActions,\n  factory: InternalActions.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalActions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\nclass Actions extends Observable {\n  constructor(internalActions$, internalExecutionStrategy) {\n    const sharedInternalActions$ = internalActions$.pipe(leaveNgxs(internalExecutionStrategy),\n    // The `InternalActions` subject emits outside of the Angular zone.\n    // We have to re-enter the Angular zone for any incoming consumer.\n    // The `share()` operator reduces the number of change detections.\n    // This would call leave only once for any stream emission across all active subscribers.\n    share());\n    super(observer => {\n      const childSubscription = sharedInternalActions$.subscribe({\n        next: ctx => observer.next(ctx),\n        error: error => observer.error(error),\n        complete: () => observer.complete()\n      });\n      observer.add(childSubscription);\n    });\n  }\n}\n/** @nocollapse */\nActions.ɵfac = function Actions_Factory(t) {\n  return new (t || Actions)(i0.ɵɵinject(InternalActions), i0.ɵɵinject(InternalNgxsExecutionStrategy));\n};\n/** @nocollapse */\nActions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Actions,\n  factory: Actions.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Actions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InternalActions\n    }, {\n      type: InternalNgxsExecutionStrategy\n    }];\n  }, null);\n})();\n\n/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n */\nconst compose = funcs => (...args) => {\n  const curr = funcs.shift();\n  return curr(...args, (...nextArgs) => compose(funcs)(...nextArgs));\n};\n\n/**\n * This operator is used for piping the observable result\n * from the `dispatch()`. It has a \"smart\" error handling\n * strategy that allows us to decide whether we propagate\n * errors to Angular's `ErrorHandler` or enable users to\n * handle them manually. We consider following cases:\n * 1) `store.dispatch()` (no subscribe) -> call `handleError()`\n * 2) `store.dispatch().subscribe()` (no error callback) -> call `handleError()`\n * 3) `store.dispatch().subscribe({ error: ... })` -> don't call `handleError()`\n * 4) `toPromise()` without `catch` -> do `handleError()`\n * 5) `toPromise()` with `catch` -> don't `handleError()`\n */\nfunction ngxsErrorHandler(internalErrorReporter, ngxsExecutionStrategy) {\n  return source => {\n    let subscribed = false;\n    source.subscribe({\n      error: error => {\n        // Do not trigger change detection for a microtask. This depends on the execution\n        // strategy being used, but the default `DispatchOutsideZoneNgxsExecutionStrategy`\n        // leaves the Angular zone.\n        ngxsExecutionStrategy.enter(() => Promise.resolve().then(() => {\n          if (!subscribed) {\n            ngxsExecutionStrategy.leave(() => internalErrorReporter.reportErrorSafely(error));\n          }\n        }));\n      }\n    });\n    return new Observable(subscriber => {\n      subscribed = true;\n      return source.pipe(leaveNgxs(ngxsExecutionStrategy)).subscribe(subscriber);\n    });\n  };\n}\nclass InternalErrorReporter {\n  constructor(_injector) {\n    this._injector = _injector;\n    /** Will be set lazily to be backward compatible. */\n    this._errorHandler = null;\n  }\n  reportErrorSafely(error) {\n    if (this._errorHandler === null) {\n      this._errorHandler = this._injector.get(ErrorHandler);\n    }\n    // The `try-catch` is used to avoid handling the error twice. Suppose we call\n    // `handleError` which re-throws the error internally. The re-thrown error will\n    // be caught by zone.js which will then get to the `zone.onError.emit()` and the\n    // `onError` subscriber will call `handleError` again.\n    try {\n      this._errorHandler.handleError(error);\n    } catch (_a) {}\n  }\n}\n/** @nocollapse */\nInternalErrorReporter.ɵfac = function InternalErrorReporter_Factory(t) {\n  return new (t || InternalErrorReporter)(i0.ɵɵinject(i0.Injector));\n};\n/** @nocollapse */\nInternalErrorReporter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalErrorReporter,\n  factory: InternalErrorReporter.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalErrorReporter, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\nclass StateStream extends OrderedBehaviorSubject {\n  constructor() {\n    super({});\n  }\n  ngOnDestroy() {\n    // The `StateStream` should never emit values once the root view is removed, e.g. when the `NgModuleRef.destroy()` is called.\n    // This will eliminate memory leaks in server-side rendered apps where the `StateStream` is created per each HTTP request, users\n    // might forget to unsubscribe from `store.select` or `store.subscribe`, thus this will lead to huge memory leaks in SSR apps.\n    this.complete();\n  }\n}\n/** @nocollapse */\nStateStream.ɵfac = function StateStream_Factory(t) {\n  return new (t || StateStream)();\n};\n/** @nocollapse */\nStateStream.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StateStream,\n  factory: StateStream.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateStream, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass PluginManager {\n  constructor(_parentManager, _pluginHandlers) {\n    this._parentManager = _parentManager;\n    this._pluginHandlers = _pluginHandlers;\n    this.plugins = [];\n    this.registerHandlers();\n  }\n  get rootPlugins() {\n    return this._parentManager && this._parentManager.plugins || this.plugins;\n  }\n  registerHandlers() {\n    const pluginHandlers = this.getPluginHandlers();\n    this.rootPlugins.push(...pluginHandlers);\n  }\n  getPluginHandlers() {\n    const handlers = this._pluginHandlers || [];\n    return handlers.map(plugin => plugin.handle ? plugin.handle.bind(plugin) : plugin);\n  }\n}\n/** @nocollapse */\nPluginManager.ɵfac = function PluginManager_Factory(t) {\n  return new (t || PluginManager)(i0.ɵɵinject(PluginManager, 12), i0.ɵɵinject(NGXS_PLUGINS, 8));\n};\n/** @nocollapse */\nPluginManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PluginManager,\n  factory: PluginManager.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PluginManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: PluginManager,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGXS_PLUGINS]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\nclass InternalDispatchedActionResults extends Subject {}\n/** @nocollapse */\nInternalDispatchedActionResults.ɵfac = /* @__PURE__ */(() => {\n  let ɵInternalDispatchedActionResults_BaseFactory;\n  return function InternalDispatchedActionResults_Factory(t) {\n    return (ɵInternalDispatchedActionResults_BaseFactory || (ɵInternalDispatchedActionResults_BaseFactory = i0.ɵɵgetInheritedFactory(InternalDispatchedActionResults)))(t || InternalDispatchedActionResults);\n  };\n})();\n/** @nocollapse */\nInternalDispatchedActionResults.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalDispatchedActionResults,\n  factory: InternalDispatchedActionResults.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalDispatchedActionResults, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass InternalDispatcher {\n  constructor(_actions, _actionResults, _pluginManager, _stateStream, _ngxsExecutionStrategy, _internalErrorReporter) {\n    this._actions = _actions;\n    this._actionResults = _actionResults;\n    this._pluginManager = _pluginManager;\n    this._stateStream = _stateStream;\n    this._ngxsExecutionStrategy = _ngxsExecutionStrategy;\n    this._internalErrorReporter = _internalErrorReporter;\n  }\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions) {\n    const result = this._ngxsExecutionStrategy.enter(() => this.dispatchByEvents(actionOrActions));\n    return result.pipe(ngxsErrorHandler(this._internalErrorReporter, this._ngxsExecutionStrategy));\n  }\n  dispatchByEvents(actionOrActions) {\n    if (Array.isArray(actionOrActions)) {\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\n    } else {\n      return this.dispatchSingle(actionOrActions);\n    }\n  }\n  dispatchSingle(action) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const type = getActionTypeFromInstance(action);\n      if (!type) {\n        const error = new Error(`This action doesn't have a type property: ${action.constructor.name}`);\n        return throwError(error);\n      }\n    }\n    const prevState = this._stateStream.getValue();\n    const plugins = this._pluginManager.plugins;\n    return compose([...plugins, (nextState, nextAction) => {\n      if (nextState !== prevState) {\n        this._stateStream.next(nextState);\n      }\n      const actionResult$ = this.getActionResultStream(nextAction);\n      actionResult$.subscribe(ctx => this._actions.next(ctx));\n      this._actions.next({\n        action: nextAction,\n        status: \"DISPATCHED\" /* Dispatched */\n      });\n      return this.createDispatchObservable(actionResult$);\n    }])(prevState, action).pipe(shareReplay());\n  }\n  getActionResultStream(action) {\n    return this._actionResults.pipe(filter(ctx => ctx.action === action && ctx.status !== \"DISPATCHED\" /* Dispatched */), take(1), shareReplay());\n  }\n  createDispatchObservable(actionResult$) {\n    return actionResult$.pipe(exhaustMap(ctx => {\n      switch (ctx.status) {\n        case \"SUCCESSFUL\" /* Successful */:\n          return of(this._stateStream.getValue());\n        case \"ERRORED\" /* Errored */:\n          return throwError(ctx.error);\n        default:\n          return EMPTY;\n      }\n    })).pipe(shareReplay());\n  }\n}\n/** @nocollapse */\nInternalDispatcher.ɵfac = function InternalDispatcher_Factory(t) {\n  return new (t || InternalDispatcher)(i0.ɵɵinject(InternalActions), i0.ɵɵinject(InternalDispatchedActionResults), i0.ɵɵinject(PluginManager), i0.ɵɵinject(StateStream), i0.ɵɵinject(InternalNgxsExecutionStrategy), i0.ɵɵinject(InternalErrorReporter));\n};\n/** @nocollapse */\nInternalDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalDispatcher,\n  factory: InternalDispatcher.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalDispatcher, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InternalActions\n    }, {\n      type: InternalDispatchedActionResults\n    }, {\n      type: PluginManager\n    }, {\n      type: StateStream\n    }, {\n      type: InternalNgxsExecutionStrategy\n    }, {\n      type: InternalErrorReporter\n    }];\n  }, null);\n})();\n\n/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n */\nconst deepFreeze = o => {\n  Object.freeze(o);\n  const oIsFunction = typeof o === 'function';\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (hasOwnProp.call(o, prop) && (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n};\n\n/**\n * @ignore\n */\nclass InternalStateOperations {\n  constructor(_stateStream, _dispatcher, _config) {\n    this._stateStream = _stateStream;\n    this._dispatcher = _dispatcher;\n    this._config = _config;\n  }\n  /**\n   * Returns the root state operators.\n   */\n  getRootStateOperations() {\n    const rootStateOperations = {\n      getState: () => this._stateStream.getValue(),\n      setState: newState => this._stateStream.next(newState),\n      dispatch: actionOrActions => this._dispatcher.dispatch(actionOrActions)\n    };\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      return this._config.developmentMode ? ensureStateAndActionsAreImmutable(rootStateOperations) : rootStateOperations;\n    } else {\n      return rootStateOperations;\n    }\n  }\n  setStateToTheCurrentWithNew(results) {\n    const stateOperations = this.getRootStateOperations();\n    // Get our current stream\n    const currentState = stateOperations.getState();\n    // Set the state to the current + new\n    stateOperations.setState(Object.assign(Object.assign({}, currentState), results.defaults));\n  }\n}\n/** @nocollapse */\nInternalStateOperations.ɵfac = function InternalStateOperations_Factory(t) {\n  return new (t || InternalStateOperations)(i0.ɵɵinject(StateStream), i0.ɵɵinject(InternalDispatcher), i0.ɵɵinject(NgxsConfig));\n};\n/** @nocollapse */\nInternalStateOperations.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InternalStateOperations,\n  factory: InternalStateOperations.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InternalStateOperations, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StateStream\n    }, {\n      type: InternalDispatcher\n    }, {\n      type: NgxsConfig\n    }];\n  }, null);\n})();\nfunction ensureStateAndActionsAreImmutable(root) {\n  return {\n    getState: () => root.getState(),\n    setState: value => {\n      const frozenValue = deepFreeze(value);\n      return root.setState(frozenValue);\n    },\n    dispatch: actions => {\n      return root.dispatch(actions);\n    }\n  };\n}\nfunction simplePatch(value) {\n  return existingState => {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (Array.isArray(value)) {\n        throwPatchingArrayError();\n      } else if (typeof value !== 'object') {\n        throwPatchingPrimitiveError();\n      }\n    }\n    const newState = Object.assign({}, existingState);\n    for (const key in value) {\n      // deep clone for patch compatibility\n      newState[key] = value[key];\n    }\n    return newState;\n  };\n}\n\n/**\n * State Context factory class\n * @ignore\n */\nclass StateContextFactory {\n  constructor(_internalStateOperations) {\n    this._internalStateOperations = _internalStateOperations;\n  }\n  /**\n   * Create the state context\n   */\n  createStateContext(mappedStore) {\n    const root = this._internalStateOperations.getRootStateOperations();\n    return {\n      getState() {\n        const currentAppState = root.getState();\n        return getState(currentAppState, mappedStore.path);\n      },\n      patchState(val) {\n        const currentAppState = root.getState();\n        const patchOperator = simplePatch(val);\n        return setStateFromOperator(root, currentAppState, patchOperator, mappedStore.path);\n      },\n      setState(val) {\n        const currentAppState = root.getState();\n        return isStateOperator(val) ? setStateFromOperator(root, currentAppState, val, mappedStore.path) : setStateValue(root, currentAppState, val, mappedStore.path);\n      },\n      dispatch(actions) {\n        return root.dispatch(actions);\n      }\n    };\n  }\n}\n/** @nocollapse */\nStateContextFactory.ɵfac = function StateContextFactory_Factory(t) {\n  return new (t || StateContextFactory)(i0.ɵɵinject(InternalStateOperations));\n};\n/** @nocollapse */\nStateContextFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StateContextFactory,\n  factory: StateContextFactory.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateContextFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InternalStateOperations\n    }];\n  }, null);\n})();\nfunction setStateValue(root, currentAppState, newValue, path) {\n  const newAppState = setValue(currentAppState, path, newValue);\n  root.setState(newAppState);\n  return newAppState;\n  // In doing this refactoring I noticed that there is a 'bug' where the\n  // application state is returned instead of this state slice.\n  // This has worked this way since the beginning see:\n  // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\n  // This needs to be fixed, but is a 'breaking' change.\n  // I will do this fix in a subsequent PR and we can decide how to handle it.\n}\nfunction setStateFromOperator(root, currentAppState, stateOperator, path) {\n  const local = getState(currentAppState, path);\n  const newValue = stateOperator(local);\n  return setStateValue(root, currentAppState, newValue, path);\n}\nfunction getState(currentAppState, path) {\n  return getValue(currentAppState, path);\n}\nconst stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');\nfunction ensureStateNameIsValid(name) {\n  if (!name) {\n    throwStateNamePropertyError();\n  } else if (!stateNameRegex.test(name)) {\n    throwStateNameError(name);\n  }\n}\nfunction ensureStateNameIsUnique(stateName, state, statesByName) {\n  const existingState = statesByName[stateName];\n  if (existingState && existingState !== state) {\n    throwStateUniqueError(stateName, state.name, existingState.name);\n  }\n}\nfunction ensureStatesAreDecorated(stateClasses) {\n  stateClasses.forEach(stateClass => {\n    if (!getStoreMetadata$1(stateClass)) {\n      throwStateDecoratorError(stateClass.name);\n    }\n  });\n}\n\n/**\n * All provided or injected tokens must have `@Injectable` decorator\n * (previously, injected tokens without `@Injectable` were allowed\n * if another decorator was used, e.g. pipes).\n */\nfunction ensureStateClassIsInjectable(stateClass) {\n  if (jit_hasInjectableAnnotation(stateClass) || aot_hasNgInjectableDef(stateClass)) {\n    return;\n  }\n  console.warn(getUndecoratedStateInIvyWarningMessage(stateClass.name));\n}\nfunction aot_hasNgInjectableDef(stateClass) {\n  // `ɵprov` is a static property added by the NGCC compiler. It always exists in\n  // AOT mode because this property is added before runtime. If an application is running in\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\n  return !!stateClass.ɵprov;\n}\nfunction jit_hasInjectableAnnotation(stateClass) {\n  // `ɵprov` doesn't exist in JIT mode (for instance when running unit tests with Jest).\n  const annotations = stateClass.__annotations__ || [];\n  return annotations.some(annotation => (annotation === null || annotation === void 0 ? void 0 : annotation.ngMetadataName) === 'Injectable');\n}\n\n/**\n * Init action\n */\nclass InitState {}\nInitState.type = '@@INIT';\n/**\n * Update action\n */\nclass UpdateState {\n  constructor(addedStates) {\n    this.addedStates = addedStates;\n  }\n}\nUpdateState.type = '@@UPDATE_STATE';\nconst NGXS_DEVELOPMENT_OPTIONS = new InjectionToken('NGXS_DEVELOPMENT_OPTIONS', {\n  providedIn: 'root',\n  factory: () => ({\n    warnOnUnhandledActions: true\n  })\n});\nclass NgxsUnhandledActionsLogger {\n  constructor(options) {\n    /**\n     * These actions should be ignored by default; the user can increase this\n     * list in the future via the `ignoreActions` method.\n     */\n    this._ignoredActions = new Set([InitState.type, UpdateState.type]);\n    if (typeof options.warnOnUnhandledActions === 'object') {\n      this.ignoreActions(...options.warnOnUnhandledActions.ignore);\n    }\n  }\n  /**\n   * Adds actions to the internal list of actions that should be ignored.\n   */\n  ignoreActions(...actions) {\n    for (const action of actions) {\n      this._ignoredActions.add(action.type);\n    }\n  }\n  /** @internal */\n  warn(action) {\n    const actionShouldBeIgnored = Array.from(this._ignoredActions).some(type => type === getActionTypeFromInstance(action));\n    if (actionShouldBeIgnored) {\n      return;\n    }\n    action = action.constructor && action.constructor.name !== 'Object' ? action.constructor.name : action.type;\n    console.warn(`The ${action} action has been dispatched but hasn't been handled. This may happen if the state with an action handler for this action is not registered.`);\n  }\n}\n/** @nocollapse */\nNgxsUnhandledActionsLogger.ɵfac = function NgxsUnhandledActionsLogger_Factory(t) {\n  return new (t || NgxsUnhandledActionsLogger)(i0.ɵɵinject(NGXS_DEVELOPMENT_OPTIONS));\n};\n/** @nocollapse */\nNgxsUnhandledActionsLogger.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxsUnhandledActionsLogger,\n  factory: NgxsUnhandledActionsLogger.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsUnhandledActionsLogger, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGXS_DEVELOPMENT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n/**\n * The `StateFactory` class adds root and feature states to the graph.\n * This extracts state names from state classes, checks if they already\n * exist in the global graph, throws errors if their names are invalid, etc.\n * See its constructor, state factories inject state factories that are\n * parent-level providers. This is required to get feature states from the\n * injector on the same level.\n *\n * The `NgxsModule.forFeature(...)` returns `providers: [StateFactory, ...states]`.\n * The `StateFactory` is initialized on the feature level and goes through `...states`\n * to get them from the injector through `injector.get(state)`.\n * @ignore\n */\nclass StateFactory {\n  constructor(_injector, _config, _parentFactory, _actions, _actionResults, _stateContextFactory, _initialState) {\n    this._injector = _injector;\n    this._config = _config;\n    this._parentFactory = _parentFactory;\n    this._actions = _actions;\n    this._actionResults = _actionResults;\n    this._stateContextFactory = _stateContextFactory;\n    this._initialState = _initialState;\n    this._actionsSubscription = null;\n    this._states = [];\n    this._statesByName = {};\n    this._statePaths = {};\n    this.getRuntimeSelectorContext = memoize(() => {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const stateFactory = this;\n      function resolveGetter(key) {\n        const path = stateFactory.statePaths[key];\n        return path ? propGetter(path.split('.'), stateFactory._config) : null;\n      }\n      const context = this._parentFactory ? this._parentFactory.getRuntimeSelectorContext() : {\n        getStateGetter(key) {\n          let getter = resolveGetter(key);\n          if (getter) {\n            return getter;\n          }\n          return (...args) => {\n            // Late loaded getter\n            if (!getter) {\n              getter = resolveGetter(key);\n            }\n            return getter ? getter(...args) : undefined;\n          };\n        },\n        getSelectorOptions(localOptions) {\n          const globalSelectorOptions = stateFactory._config.selectorOptions;\n          return Object.assign(Object.assign({}, globalSelectorOptions), localOptions || {});\n        }\n      };\n      return context;\n    });\n  }\n  get states() {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n  get statesByName() {\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\n  }\n  get statePaths() {\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\n  }\n  static _cloneDefaults(defaults) {\n    let value = defaults;\n    if (Array.isArray(defaults)) {\n      value = defaults.slice();\n    } else if (isObject(defaults)) {\n      value = Object.assign({}, defaults);\n    } else if (defaults === undefined) {\n      value = {};\n    }\n    return value;\n  }\n  ngOnDestroy() {\n    var _a;\n    (_a = this._actionsSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n  /**\n   * Add a new state to the global defs.\n   */\n  add(stateClasses) {\n    if (NG_DEV_MODE) {\n      ensureStatesAreDecorated(stateClasses);\n    }\n    const {\n      newStates\n    } = this.addToStatesMap(stateClasses);\n    if (!newStates.length) return [];\n    const stateGraph = buildGraph(newStates);\n    const sortedStates = topologicalSort(stateGraph);\n    const paths = findFullParentPath(stateGraph);\n    const nameGraph = nameToState(newStates);\n    const bootstrappedStores = [];\n    for (const name of sortedStates) {\n      const stateClass = nameGraph[name];\n      const path = paths[name];\n      const meta = stateClass[META_KEY];\n      this.addRuntimeInfoToMeta(meta, path);\n      // Note: previously we called `ensureStateClassIsInjectable` within the\n      // `State` decorator. This check is moved here because the `ɵprov` property\n      // will not exist on the class in JIT mode (because it's set asynchronously\n      // during JIT compilation through `Object.defineProperty`).\n      if (NG_DEV_MODE) {\n        ensureStateClassIsInjectable(stateClass);\n      }\n      const stateMap = {\n        name,\n        path,\n        isInitialised: false,\n        actions: meta.actions,\n        instance: this._injector.get(stateClass),\n        defaults: StateFactory._cloneDefaults(meta.defaults)\n      };\n      // ensure our store hasn't already been added\n      // but don't throw since it could be lazy\n      // loaded from different paths\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\n        bootstrappedStores.push(stateMap);\n      }\n      this.states.push(stateMap);\n    }\n    return bootstrappedStores;\n  }\n  /**\n   * Add a set of states to the store and return the defaults\n   */\n  addAndReturnDefaults(stateClasses) {\n    const classes = stateClasses || [];\n    const mappedStores = this.add(classes);\n    const defaults = mappedStores.reduce((result, mappedStore) => setValue(result, mappedStore.path, mappedStore.defaults), {});\n    return {\n      defaults,\n      states: mappedStores\n    };\n  }\n  connectActionHandlers() {\n    // Note: We have to connect actions only once when the `StateFactory`\n    //       is being created for the first time. This checks if we're in\n    //       a child state factory and the parent state factory already exists.\n    if (this._parentFactory || this._actionsSubscription !== null) {\n      return;\n    }\n    const dispatched$ = new Subject();\n    this._actionsSubscription = this._actions.pipe(filter(ctx => ctx.status === \"DISPATCHED\" /* Dispatched */), mergeMap(ctx => {\n      dispatched$.next(ctx);\n      const action = ctx.action;\n      return this.invokeActions(dispatched$, action).pipe(map(() => ({\n        action,\n        status: \"SUCCESSFUL\" /* Successful */\n      })), defaultIfEmpty({\n        action,\n        status: \"CANCELED\" /* Canceled */\n      }), catchError(error => of({\n        action,\n        status: \"ERRORED\" /* Errored */,\n        error\n      })));\n    })).subscribe(ctx => this._actionResults.next(ctx));\n  }\n  /**\n   * Invoke actions on the states.\n   */\n  invokeActions(dispatched$, action) {\n    const type = getActionTypeFromInstance(action);\n    const results = [];\n    // Determines whether the dispatched action has been handled, this is assigned\n    // to `true` within the below `for` loop if any `actionMetas` has been found.\n    let actionHasBeenHandled = false;\n    for (const metadata of this.states) {\n      const actionMetas = metadata.actions[type];\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\n          try {\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n            if (isObservable(result)) {\n              // If this observable has been completed w/o emitting\n              // any value then we wouldn't want to complete the whole chain\n              // of actions. Since if any observable completes then\n              // action will be canceled.\n              // For instance if any action handler would've had such statement:\n              // `handler(ctx) { return EMPTY; }`\n              // then the action will be canceled.\n              // See https://github.com/ngxs/store/issues/1568\n              result = result.pipe(mergeMap(value => {\n                if (value instanceof Promise) {\n                  return from(value);\n                }\n                if (isObservable(value)) {\n                  return value;\n                }\n                return of(value);\n              }), defaultIfEmpty({}));\n              if (actionMeta.options.cancelUncompleted) {\n                // todo: ofActionDispatched should be used with action class\n                result = result.pipe(takeUntil(dispatched$.pipe(ofActionDispatched(action))));\n              }\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n          actionHasBeenHandled = true;\n        }\n      }\n    }\n    // The `NgxsUnhandledActionsLogger` is a tree-shakable class which functions\n    // only during development.\n    if (NG_DEV_MODE && !actionHasBeenHandled) {\n      const unhandledActionsLogger = this._injector.get(NgxsUnhandledActionsLogger, null);\n      // The `NgxsUnhandledActionsLogger` will not be resolved by the injector if the\n      // `NgxsDevelopmentModule` is not provided. It's enough to check whether the `injector.get`\n      // didn't return `null` so we may ensure the module has been imported.\n      if (unhandledActionsLogger) {\n        unhandledActionsLogger.warn(action);\n      }\n    }\n    if (!results.length) {\n      results.push(of({}));\n    }\n    return forkJoin(results);\n  }\n  addToStatesMap(stateClasses) {\n    const newStates = [];\n    const statesMap = this.statesByName;\n    for (const stateClass of stateClasses) {\n      const stateName = getStoreMetadata$1(stateClass).name;\n      if (NG_DEV_MODE) {\n        ensureStateNameIsUnique(stateName, stateClass, statesMap);\n      }\n      const unmountedState = !statesMap[stateName];\n      if (unmountedState) {\n        newStates.push(stateClass);\n        statesMap[stateName] = stateClass;\n      }\n    }\n    return {\n      newStates\n    };\n  }\n  addRuntimeInfoToMeta(meta, path) {\n    this.statePaths[meta.name] = path;\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\n    // We will need to come up with an alternative in v4 because this is used by many plugins\n    meta.path = path;\n  }\n  hasBeenMountedAndBootstrapped(name, path) {\n    const valueIsBootstrappedInInitialState = getValue(this._initialState, path) !== undefined;\n    // This checks whether a state has been already added to the global graph and\n    // its lifecycle is in 'bootstrapped' state.\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\n  }\n}\n/** @nocollapse */\nStateFactory.ɵfac = function StateFactory_Factory(t) {\n  return new (t || StateFactory)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(NgxsConfig), i0.ɵɵinject(StateFactory, 12), i0.ɵɵinject(InternalActions), i0.ɵɵinject(InternalDispatchedActionResults), i0.ɵɵinject(StateContextFactory), i0.ɵɵinject(INITIAL_STATE_TOKEN, 8));\n};\n/** @nocollapse */\nStateFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StateFactory,\n  factory: StateFactory.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StateFactory, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: NgxsConfig\n    }, {\n      type: StateFactory,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: InternalActions\n    }, {\n      type: InternalDispatchedActionResults\n    }, {\n      type: StateContextFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INITIAL_STATE_TOKEN]\n      }]\n    }];\n  }, null);\n})();\nfunction createRootSelectorFactory(selectorMetaData, selectors, memoizedSelectorFn) {\n  return context => {\n    const {\n      argumentSelectorFunctions,\n      selectorOptions\n    } = getRuntimeSelectorInfo(context, selectorMetaData, selectors);\n    return function selectFromRoot(rootState) {\n      // Determine arguments from the app state using the selectors\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\n      // if the lambda tries to access a something on the\n      // state that doesn't exist, it will throw a TypeError.\n      // since this is quite usual behaviour, we simply return undefined if so.\n      try {\n        return memoizedSelectorFn(...results);\n      } catch (ex) {\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\n          return undefined;\n        }\n        throw ex;\n      }\n    };\n  };\n}\nfunction createMemoizedSelectorFn(originalFn, creationMetadata) {\n  const containerClass = creationMetadata && creationMetadata.containerClass;\n  const wrappedFn = function wrappedSelectorFn(...args) {\n    const returnValue = originalFn.apply(containerClass, args);\n    if (returnValue instanceof Function) {\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\n      return innerMemoizedFn;\n    }\n    return returnValue;\n  };\n  const memoizedFn = memoize(wrappedFn);\n  Object.setPrototypeOf(memoizedFn, originalFn);\n  return memoizedFn;\n}\nfunction getRuntimeSelectorInfo(context, selectorMetaData, selectors = []) {\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\n  const selectorsToApply = getSelectorsToApply(selectors, selectorOptions, selectorMetaData.containerClass);\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\n    const factory = getRootSelectorFactory(selector);\n    return factory(context);\n  });\n  return {\n    selectorOptions,\n    argumentSelectorFunctions\n  };\n}\nfunction getSelectorsToApply(selectors = [], selectorOptions, containerClass) {\n  const selectorsToApply = [];\n  const canInjectContainerState = selectors.length === 0 || selectorOptions.injectContainerState;\n  if (containerClass && canInjectContainerState) {\n    // If we are on a state class, add it as the first selector parameter\n    const metadata = getStoreMetadata$1(containerClass);\n    if (metadata) {\n      selectorsToApply.push(containerClass);\n    }\n  }\n  if (selectors) {\n    selectorsToApply.push(...selectors);\n  }\n  return selectorsToApply;\n}\n/**\n * This function gets the factory function to create the selector to get the selected slice from the app state\n * @ignore\n */\nfunction getRootSelectorFactory(selector) {\n  const metadata = getSelectorMetadata$1(selector) || getStoreMetadata$1(selector);\n  return metadata && metadata.makeRootSelector || (() => selector);\n}\n\n// tslint:disable:unified-signatures\nclass Store {\n  constructor(_stateStream, _internalStateOperations, _config, _internalExecutionStrategy, _stateFactory, initialStateValue) {\n    this._stateStream = _stateStream;\n    this._internalStateOperations = _internalStateOperations;\n    this._config = _config;\n    this._internalExecutionStrategy = _internalExecutionStrategy;\n    this._stateFactory = _stateFactory;\n    /**\n     * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n     * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n     * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n     */\n    this._selectableStateStream = this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.initStateStream(initialStateValue);\n  }\n  /**\n   * Dispatches event(s).\n   */\n  dispatch(actionOrActions) {\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\n  }\n  select(selector) {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return this._selectableStateStream.pipe(map(selectorFn), catchError(err => {\n      // if error is TypeError we swallow it to prevent usual errors with property access\n      const {\n        suppressErrors\n      } = this._config.selectorOptions;\n      if (err instanceof TypeError && suppressErrors) {\n        return of(undefined);\n      }\n      // rethrow other errors\n      return throwError(err);\n    }), distinctUntilChanged(), leaveNgxs(this._internalExecutionStrategy));\n  }\n  selectOnce(selector) {\n    return this.select(selector).pipe(take(1));\n  }\n  selectSnapshot(selector) {\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n  /**\n   * Allow the user to subscribe to the root of the state\n   */\n  subscribe(fn) {\n    return this._selectableStateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\n  }\n  /**\n   * Return the raw value of the state.\n   */\n  snapshot() {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   */\n  reset(state) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n  getStoreBoundSelectorFn(selector) {\n    const makeSelectorFn = getRootSelectorFactory(selector);\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\n    return makeSelectorFn(runtimeContext);\n  }\n  initStateStream(initialStateValue) {\n    const value = this._stateStream.value;\n    const storeIsEmpty = !value || Object.keys(value).length === 0;\n    if (storeIsEmpty) {\n      const defaultStateNotEmpty = Object.keys(this._config.defaultsState).length > 0;\n      const storeValues = defaultStateNotEmpty ? Object.assign(Object.assign({}, this._config.defaultsState), initialStateValue) : initialStateValue;\n      this._stateStream.next(storeValues);\n    }\n  }\n}\n/** @nocollapse */\nStore.ɵfac = function Store_Factory(t) {\n  return new (t || Store)(i0.ɵɵinject(StateStream), i0.ɵɵinject(InternalStateOperations), i0.ɵɵinject(NgxsConfig), i0.ɵɵinject(InternalNgxsExecutionStrategy), i0.ɵɵinject(StateFactory), i0.ɵɵinject(INITIAL_STATE_TOKEN, 8));\n};\n/** @nocollapse */\nStore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Store,\n  factory: Store.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Store, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StateStream\n    }, {\n      type: InternalStateOperations\n    }, {\n      type: NgxsConfig\n    }, {\n      type: InternalNgxsExecutionStrategy\n    }, {\n      type: StateFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [INITIAL_STATE_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Allows the select decorator to get access to the DI store, this is used internally\n * in `@Select` decorator.\n */\nclass SelectFactory {\n  constructor(store, config) {\n    SelectFactory.store = store;\n    SelectFactory.config = config;\n  }\n  ngOnDestroy() {\n    SelectFactory.store = null;\n    SelectFactory.config = null;\n  }\n}\nSelectFactory.store = null;\nSelectFactory.config = null;\n/** @nocollapse */\nSelectFactory.ɵfac = function SelectFactory_Factory(t) {\n  return new (t || SelectFactory)(i0.ɵɵinject(Store), i0.ɵɵinject(NgxsConfig));\n};\n/** @nocollapse */\nSelectFactory.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SelectFactory,\n  factory: SelectFactory.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Store\n    }, {\n      type: NgxsConfig\n    }];\n  }, null);\n})();\nclass LifecycleStateManager {\n  constructor(_store, _internalErrorReporter, _internalStateOperations, _stateContextFactory, _bootstrapper) {\n    this._store = _store;\n    this._internalErrorReporter = _internalErrorReporter;\n    this._internalStateOperations = _internalStateOperations;\n    this._stateContextFactory = _stateContextFactory;\n    this._bootstrapper = _bootstrapper;\n    this._destroy$ = new Subject();\n  }\n  ngOnDestroy() {\n    this._destroy$.next();\n  }\n  ngxsBootstrap(action, results) {\n    this._internalStateOperations.getRootStateOperations().dispatch(action).pipe(filter(() => !!results), tap(() => this._invokeInitOnStates(results.states)), mergeMap(() => this._bootstrapper.appBootstrapped$), filter(appBootstrapped => !!appBootstrapped), catchError(error => {\n      // The `SafeSubscriber` (which is used by most RxJS operators) re-throws\n      // errors asynchronously (`setTimeout(() => { throw error })`). This might\n      // break existing user's code or unit tests. We catch the error manually to\n      // be backward compatible with the old behavior.\n      this._internalErrorReporter.reportErrorSafely(error);\n      return EMPTY;\n    }), takeUntil(this._destroy$)).subscribe(() => this._invokeBootstrapOnStates(results.states));\n  }\n  _invokeInitOnStates(mappedStores) {\n    for (const mappedStore of mappedStores) {\n      const instance = mappedStore.instance;\n      if (instance.ngxsOnChanges) {\n        this._store.select(state => getValue(state, mappedStore.path)).pipe(startWith(undefined), pairwise(), takeUntil(this._destroy$)).subscribe(([previousValue, currentValue]) => {\n          const change = new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\n          instance.ngxsOnChanges(change);\n        });\n      }\n      if (instance.ngxsOnInit) {\n        instance.ngxsOnInit(this._getStateContext(mappedStore));\n      }\n      mappedStore.isInitialised = true;\n    }\n  }\n  _invokeBootstrapOnStates(mappedStores) {\n    for (const mappedStore of mappedStores) {\n      const instance = mappedStore.instance;\n      if (instance.ngxsAfterBootstrap) {\n        instance.ngxsAfterBootstrap(this._getStateContext(mappedStore));\n      }\n    }\n  }\n  _getStateContext(mappedStore) {\n    return this._stateContextFactory.createStateContext(mappedStore);\n  }\n}\n/** @nocollapse */\nLifecycleStateManager.ɵfac = function LifecycleStateManager_Factory(t) {\n  return new (t || LifecycleStateManager)(i0.ɵɵinject(Store), i0.ɵɵinject(InternalErrorReporter), i0.ɵɵinject(InternalStateOperations), i0.ɵɵinject(StateContextFactory), i0.ɵɵinject(i5.NgxsBootstrapper));\n};\n/** @nocollapse */\nLifecycleStateManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LifecycleStateManager,\n  factory: LifecycleStateManager.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LifecycleStateManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Store\n    }, {\n      type: InternalErrorReporter\n    }, {\n      type: InternalStateOperations\n    }, {\n      type: StateContextFactory\n    }, {\n      type: i5.NgxsBootstrapper\n    }];\n  }, null);\n})();\n\n/**\n * Root module\n * @ignore\n */\nclass NgxsRootModule {\n  constructor(factory, internalStateOperations, _store, _select, states = [], lifecycleStateManager) {\n    // Add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(states);\n    internalStateOperations.setStateToTheCurrentWithNew(results);\n    // Connect our actions stream\n    factory.connectActionHandlers();\n    // Dispatch the init action and invoke init and bootstrap functions after\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\n  }\n}\n/** @nocollapse */\nNgxsRootModule.ɵfac = function NgxsRootModule_Factory(t) {\n  return new (t || NgxsRootModule)(i0.ɵɵinject(StateFactory), i0.ɵɵinject(InternalStateOperations), i0.ɵɵinject(Store), i0.ɵɵinject(SelectFactory), i0.ɵɵinject(ROOT_STATE_TOKEN, 8), i0.ɵɵinject(LifecycleStateManager));\n};\n/** @nocollapse */\nNgxsRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxsRootModule\n});\n/** @nocollapse */\nNgxsRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsRootModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: StateFactory\n    }, {\n      type: InternalStateOperations\n    }, {\n      type: Store\n    }, {\n      type: SelectFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ROOT_STATE_TOKEN]\n      }]\n    }, {\n      type: LifecycleStateManager\n    }];\n  }, null);\n})();\n\n/**\n * Feature module\n * @ignore\n */\nclass NgxsFeatureModule {\n  constructor(_store, internalStateOperations, factory, states = [], lifecycleStateManager) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n    const flattenedStates = NgxsFeatureModule.flattenStates(states);\n    // add stores to the state graph and return their defaults\n    const results = factory.addAndReturnDefaults(flattenedStates);\n    if (results.states.length) {\n      internalStateOperations.setStateToTheCurrentWithNew(results);\n      // dispatch the update action and invoke init and bootstrap functions after\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\n    }\n  }\n  static flattenStates(states = []) {\n    return states.reduce((total, values) => total.concat(values), []);\n  }\n}\n/** @nocollapse */\nNgxsFeatureModule.ɵfac = function NgxsFeatureModule_Factory(t) {\n  return new (t || NgxsFeatureModule)(i0.ɵɵinject(Store), i0.ɵɵinject(InternalStateOperations), i0.ɵɵinject(StateFactory), i0.ɵɵinject(FEATURE_STATE_TOKEN, 8), i0.ɵɵinject(LifecycleStateManager));\n};\n/** @nocollapse */\nNgxsFeatureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxsFeatureModule\n});\n/** @nocollapse */\nNgxsFeatureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsFeatureModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: Store\n    }, {\n      type: InternalStateOperations\n    }, {\n      type: StateFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FEATURE_STATE_TOKEN]\n      }]\n    }, {\n      type: LifecycleStateManager\n    }];\n  }, null);\n})();\n\n/**\n * Ngxs Module\n */\nclass NgxsModule {\n  /**\n   * Root module factory\n   */\n  static forRoot(states = [], options = {}) {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [StateFactory, PluginManager, ...states, ...NgxsModule.ngxsTokenProviders(states, options)]\n    };\n  }\n  /**\n   * Feature module factory\n   */\n  static forFeature(states = []) {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [\n      // This is required on the feature level, see comments in `state-factory.ts`.\n      StateFactory, PluginManager, ...states, {\n        provide: FEATURE_STATE_TOKEN,\n        multi: true,\n        useValue: states\n      }]\n    };\n  }\n  static ngxsTokenProviders(states, options) {\n    return [{\n      provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,\n      useValue: options.executionStrategy\n    }, {\n      provide: ROOT_STATE_TOKEN,\n      useValue: states\n    }, {\n      provide: ROOT_OPTIONS,\n      useValue: options\n    }, {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: NgxsModule.appBootstrapListenerFactory,\n      multi: true,\n      deps: [NgxsBootstrapper]\n    }, {\n      provide: ɵNGXS_STATE_CONTEXT_FACTORY,\n      useExisting: StateContextFactory\n    }, {\n      provide: ɵNGXS_STATE_FACTORY,\n      useExisting: StateFactory\n    }];\n  }\n  static appBootstrapListenerFactory(bootstrapper) {\n    return () => bootstrapper.bootstrap();\n  }\n}\n/** @nocollapse */\nNgxsModule.ɵfac = function NgxsModule_Factory(t) {\n  return new (t || NgxsModule)();\n};\n/** @nocollapse */\nNgxsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxsModule\n});\n/** @nocollapse */\nNgxsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\n * Decorates a method with a action information.\n */\nfunction Action(actions, options) {\n  return (target, name) => {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const isStaticMethod = target.hasOwnProperty('prototype');\n      if (isStaticMethod) {\n        throwActionDecoratorError();\n      }\n    }\n    const meta = ensureStoreMetadata$1(target.constructor);\n    if (!Array.isArray(actions)) {\n      actions = [actions];\n    }\n    for (const action of actions) {\n      const type = action.type;\n      if (!meta.actions[type]) {\n        meta.actions[type] = [];\n      }\n      meta.actions[type].push({\n        fn: name,\n        options: options || {},\n        type\n      });\n    }\n  };\n}\n\n/**\n * Decorates a class with ngxs state information.\n */\nfunction State(options) {\n  return target => {\n    const stateClass = target;\n    const meta = ensureStoreMetadata$1(stateClass);\n    const inheritedStateClass = Object.getPrototypeOf(stateClass);\n    const optionsWithInheritance = getStateOptions(inheritedStateClass, options);\n    mutateMetaData({\n      meta,\n      inheritedStateClass,\n      optionsWithInheritance\n    });\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\n  };\n}\nfunction getStateOptions(inheritedStateClass, options) {\n  const inheritanceOptions = inheritedStateClass[META_OPTIONS_KEY] || {};\n  return Object.assign(Object.assign({}, inheritanceOptions), options);\n}\nfunction mutateMetaData(params) {\n  const {\n    meta,\n    inheritedStateClass,\n    optionsWithInheritance\n  } = params;\n  const {\n    children,\n    defaults,\n    name\n  } = optionsWithInheritance;\n  const stateName = typeof name === 'string' ? name : name && name.getName() || null;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ensureStateNameIsValid(stateName);\n  }\n  if (inheritedStateClass.hasOwnProperty(META_KEY)) {\n    const inheritedMeta = inheritedStateClass[META_KEY] || {};\n    meta.actions = Object.assign(Object.assign({}, meta.actions), inheritedMeta.actions);\n  }\n  meta.children = children;\n  meta.defaults = defaults;\n  meta.name = stateName;\n}\nconst DOLLAR_CHAR_CODE = 36;\nfunction createSelectObservable(selector) {\n  if (!SelectFactory.store) {\n    throwSelectFactoryNotConnectedError();\n  }\n  return SelectFactory.store.select(selector);\n}\nfunction createSelectorFn(name, rawSelector, paths = []) {\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\n  if (typeof rawSelector === 'string') {\n    const propsArray = paths.length ? [rawSelector, ...paths] : rawSelector.split('.');\n    return propGetter(propsArray, SelectFactory.config);\n  }\n  return rawSelector;\n}\n/**\n * @example If `foo$` => make it just `foo`\n */\nfunction removeDollarAtTheEnd(name) {\n  const lastCharIndex = name.length - 1;\n  const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\n}\n\n/**\n * Decorator for selecting a slice of state from the store.\n */\nfunction Select(rawSelector, ...paths) {\n  return function (target, key) {\n    const name = key.toString();\n    const selectorId = `__${name}__selector`;\n    const selector = createSelectorFn(name, rawSelector, paths);\n    Object.defineProperties(target, {\n      [selectorId]: {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      },\n      [name]: {\n        enumerable: true,\n        configurable: true,\n        get() {\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\n        }\n      }\n    });\n  };\n}\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\nconst selectorOptionsMetaAccessor = {\n  getOptions: target => {\n    return target && target[SELECTOR_OPTIONS_META_KEY] || {};\n  },\n  defineOptions: (target, options) => {\n    if (!target) return;\n    target[SELECTOR_OPTIONS_META_KEY] = options;\n  }\n};\nfunction setupSelectorMetadata(originalFn, creationMetadata) {\n  const selectorMetaData = ensureSelectorMetadata$1(originalFn);\n  selectorMetaData.originalFn = originalFn;\n  let getExplicitSelectorOptions = () => ({});\n  if (creationMetadata) {\n    selectorMetaData.containerClass = creationMetadata.containerClass;\n    selectorMetaData.selectorName = creationMetadata.selectorName || null;\n    getExplicitSelectorOptions = creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\n  }\n  const selectorMetaDataClone = Object.assign({}, selectorMetaData);\n  selectorMetaData.getSelectorOptions = () => getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\n  return selectorMetaData;\n}\nfunction getLocalSelectorOptions(selectorMetaData, explicitOptions) {\n  return Object.assign(Object.assign(Object.assign(Object.assign({}, selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}), selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}), selectorMetaData.getSelectorOptions() || {}), explicitOptions);\n}\n\n/**\n * Decorator for setting selector options at a method or class level.\n */\nfunction SelectorOptions(options) {\n  return function decorate(target, methodName, descriptor) {\n    if (methodName) {\n      descriptor || (descriptor = Object.getOwnPropertyDescriptor(target, methodName));\n      // Method Decorator\n      const originalFn = descriptor.value || descriptor.originalFn;\n      if (originalFn) {\n        selectorOptionsMetaAccessor.defineOptions(originalFn, options);\n      }\n    } else {\n      // Class Decorator\n      selectorOptionsMetaAccessor.defineOptions(target, options);\n    }\n  };\n}\nfunction ensureStoreMetadata(target) {\n  return ensureStoreMetadata$1(target);\n}\nfunction getStoreMetadata(target) {\n  return getStoreMetadata$1(target);\n}\nfunction ensureSelectorMetadata(target) {\n  return ensureSelectorMetadata$1(target);\n}\nfunction getSelectorMetadata(target) {\n  return getSelectorMetadata$1(target);\n}\nfunction createSelector(selectors, projector, creationMetadata) {\n  const memoizedFn = createMemoizedSelectorFn(projector, creationMetadata);\n  const selectorMetaData = setupSelectorMetadata(projector, creationMetadata);\n  selectorMetaData.makeRootSelector = createRootSelectorFactory(selectorMetaData, selectors, memoizedFn);\n  return memoizedFn;\n}\nfunction Selector(selectors) {\n  return (target, key, descriptor) => {\n    descriptor || (descriptor = Object.getOwnPropertyDescriptor(target, key));\n    const originalFn = descriptor === null || descriptor === void 0 ? void 0 : descriptor.value;\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (originalFn && typeof originalFn !== 'function') {\n        throwSelectorDecoratorError();\n      }\n    }\n    const memoizedFn = createSelector(selectors, originalFn, {\n      containerClass: target,\n      selectorName: key.toString(),\n      getSelectorOptions() {\n        return {};\n      }\n    });\n    const newDescriptor = {\n      configurable: true,\n      get() {\n        return memoizedFn;\n      }\n    };\n    // Add hidden property to descriptor\n    newDescriptor['originalFn'] = originalFn;\n    return newDescriptor;\n  };\n}\nclass StateToken {\n  constructor(name) {\n    this.name = name;\n    const selectorMetadata = ensureSelectorMetadata$1(this);\n    selectorMetadata.makeRootSelector = runtimeContext => {\n      return runtimeContext.getStateGetter(this.name);\n    };\n  }\n  getName() {\n    return this.name;\n  }\n  toString() {\n    return `StateToken[${this.name}]`;\n  }\n}\nclass NgxsDevelopmentModule {\n  static forRoot(options) {\n    return {\n      ngModule: NgxsDevelopmentModule,\n      providers: [NgxsUnhandledActionsLogger, {\n        provide: NGXS_DEVELOPMENT_OPTIONS,\n        useValue: options\n      }]\n    };\n  }\n}\n/** @nocollapse */\nNgxsDevelopmentModule.ɵfac = function NgxsDevelopmentModule_Factory(t) {\n  return new (t || NgxsDevelopmentModule)();\n};\n/** @nocollapse */\nNgxsDevelopmentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxsDevelopmentModule\n});\n/** @nocollapse */\nNgxsDevelopmentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxsDevelopmentModule, [{\n    type: NgModule\n  }], null, null);\n})();\nfunction ensureValidSelector(selector, context = {}) {\n  const noun = context.noun || 'selector';\n  const prefix = context.prefix ? context.prefix + ': ' : '';\n  ensureValueProvided(selector, {\n    noun,\n    prefix: context.prefix\n  });\n  const metadata = getSelectorMetadata$1(selector) || getStoreMetadata$1(selector);\n  if (!metadata) {\n    throw new Error(`${prefix}The value provided as the ${noun} is not a valid selector.`);\n  }\n}\nfunction ensureValueProvided(value, context = {}) {\n  const noun = context.noun || 'value';\n  const prefix = context.prefix ? context.prefix + ': ' : '';\n  if (!value) {\n    throw new Error(`${prefix}A ${noun} must be provided.`);\n  }\n}\nfunction createModelSelector(selectorMap) {\n  const selectorKeys = Object.keys(selectorMap);\n  const selectors = Object.values(selectorMap);\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ensureValidSelectorMap({\n      prefix: '[createModelSelector]',\n      selectorMap,\n      selectorKeys,\n      selectors\n    });\n  }\n  return createSelector(selectors, (...args) => {\n    return selectorKeys.reduce((obj, key, index) => {\n      obj[key] = args[index];\n      return obj;\n    }, {});\n  });\n}\nfunction ensureValidSelectorMap({\n  prefix,\n  selectorMap,\n  selectorKeys,\n  selectors\n}) {\n  ensureValueProvided(selectorMap, {\n    prefix,\n    noun: 'selector map'\n  });\n  ensureValueProvided(typeof selectorMap === 'object', {\n    prefix,\n    noun: 'valid selector map'\n  });\n  ensureValueProvided(selectorKeys.length, {\n    prefix,\n    noun: 'non-empty selector map'\n  });\n  selectors.forEach((selector, index) => ensureValidSelector(selector, {\n    prefix,\n    noun: `selector for the '${selectorKeys[index]}' property`\n  }));\n}\nfunction createPickSelector(selector, keys) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ensureValidSelector(selector, {\n      prefix: '[createPickSelector]'\n    });\n  }\n  const validKeys = keys.filter(Boolean);\n  const selectors = validKeys.map(key => createSelector([selector], s => s[key]));\n  return createSelector([...selectors], (...props) => {\n    return validKeys.reduce((acc, key, index) => {\n      acc[key] = props[index];\n      return acc;\n    }, {});\n  });\n}\nfunction createPropertySelectors(parentSelector) {\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ensureValidSelector(parentSelector, {\n      prefix: '[createPropertySelectors]',\n      noun: 'parent selector'\n    });\n  }\n  const cache = {};\n  return new Proxy({}, {\n    get(_target, prop) {\n      const selector = cache[prop] || createSelector([parentSelector], s => s === null || s === void 0 ? void 0 : s[prop]);\n      cache[prop] = selector;\n      return selector;\n    }\n  });\n}\n\n/**\n * The public api for consumers of @ngxs/store\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Action, Actions, InitState, NGXS_PLUGINS, NgxsDevelopmentModule, NgxsModule, NgxsSimpleChange, NgxsUnhandledActionsLogger, NoopNgxsExecutionStrategy, Select, Selector, SelectorOptions, State, StateStream, StateToken, Store, UpdateState, actionMatcher, createModelSelector, createPickSelector, createPropertySelectors, createSelector, ensureSelectorMetadata, ensureStoreMetadata, getActionTypeFromInstance, getSelectorMetadata, getStoreMetadata, getValue, ofAction, ofActionCanceled, ofActionCompleted, ofActionDispatched, ofActionErrored, ofActionSuccessful, setValue, NgxsFeatureModule as ɵNgxsFeatureModule, NgxsRootModule as ɵNgxsRootModule };\n"],
  "mappings": "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",
  "names": ["NgxsConfig_Factory", "value"]
}
